{"version":3,"file":"static/js/99.4e59d907.chunk.js","mappings":"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","sources":["components/AddContactForm/AddContactForm.styled.js","redux/contacts/selectors.js","components/AddContactForm/AddContactForm.jsx","components/Contact/Contact.styled.js","redux/filter/selectors.js","components/Contact/Contact.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/GlobalStyle.js","components/Section/Section.styled.js","components/Section/Section.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const Input = styled(Field)`\n  border: none;\n  color: ${({ theme }) => theme.colors.black};\n  box-shadow: 0px 2px 8px 1px rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n`;\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 400px;\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.colors.black};\n  border-radius: 5px;\n`;\n\nexport const ContactLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: 600;\n  p {\n    color: ${({ theme }) => theme.colors.red};\n    font-weight: 400;\n    font-size: 12px;\n  }\n`;\n\nexport const AddButton = styled.button`\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0px 2px 8px 1px rgba(0, 0, 0, 0.3);\n`;\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { Formik, ErrorMessage } from 'formik';\nimport {\n  AddButton,\n  ContactForm,\n  ContactLabel,\n  Input,\n} from './AddContactForm.styled';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst nameRegExp = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .min(2, 'Too Short!')\n    .max(60, 'Too Long!')\n    .required('Required'),\n  number: yup\n    .string()\n    .matches(\n      phoneRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required'),\n});\n\nconst initialValues = { name: '', number: '' };\n\nconst alertMessage = name => {\n  return `${name} is already in contacts`;\n};\n\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const contactsName = contacts.map(contact => contact.name);\n\n  const onSubmit = values => {\n    contactsName.includes(values.name)\n      ? alert(alertMessage(values.name))\n      : dispatch(addContact({ name: values.name, number: values.number }));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={(values, { resetForm }) => {\n        onSubmit(values);\n        resetForm();\n      }}\n    >\n      <ContactForm autoComplete=\"off\">\n        <ContactLabel htmlFor=\"name\">\n          Name\n          <Input name=\"name\" required />\n          <ErrorMessage name=\"name\" component=\"p\" />\n        </ContactLabel>\n        <ContactLabel htmlFor=\"number\">\n          Number\n          <Input type=\"tel\" name=\"number\" required />\n          <ErrorMessage name=\"number\" component=\"p\" />\n        </ContactLabel>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </ContactForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  list-style: disc;\n  padding-left: 5px;\n  width: 400px;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  gap: 10px;\n  padding-bottom: 14px;\n  justify-content: space-between;\n`;\n\nexport const DeleteButton = styled.button`\n  border-radius: 5px;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0px 2px 8px 1px rgba(0, 0, 0, 0.3);\n`;\n","export const selectFilter = state => state.filter;\n","import PropTypes from 'prop-types';\nimport { ContactItem, ContactsList, DeleteButton } from './Contact.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Contact = ({ children }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {children}\n      {isLoading && <Loader />}\n      {error && <b>{error}</b>}\n\n      {contacts.length > 0 && (\n        <ContactsList>\n          {visibleContacts.map(({ id, name, number }) => {\n            return (\n              <ContactItem key={id}>\n                <p>\n                  ᛫ {name}: {number}\n                </p>\n                <DeleteButton\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  Delete\n                </DeleteButton>\n              </ContactItem>\n            );\n          })}\n        </ContactsList>\n      )}\n    </>\n  );\n};\n\nContact.propTypes = {\n  children: PropTypes.node,\n};\n","import { Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const FilterForm = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled(Field)`\n  border: none;\n  color: ${({ theme }) => theme.colors.black};\n  box-shadow: 0px 2px 8px 1px rgba(0, 0, 0, 0.3);\n  border-radius: 5px;\n`;\n","import { Formik, Form } from 'formik';\nimport { FilterForm, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <Formik initialValues={filter}>\n      <Form autoComplete=\"off\">\n        <FilterForm htmlFor=\"filter\">\n          Find contacts by name\n          <Input\n            name=\"filter\"\n            value={filter}\n            onChange={event =>\n              dispatch(filterContacts(event.currentTarget.value))\n            }\n          />\n        </FilterForm>\n      </Form>\n    </Formik>\n  );\n};\n","import { createGlobalStyle } from 'styled-components';\nimport 'modern-normalize';\n\nexport const GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\np {\n    margin: 0;\n}\n\nul, ol{\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n`;\n","import styled from 'styled-components';\n\nexport const PhoneboockTitle = styled.h1`\n  font-size: 32px;\n`;\n","import PropTypes from 'prop-types';\nimport { PhoneboockTitle } from './Section.styled';\n\nexport const Section = ({ children, title, firstTitle }) => {\n  return (\n    <section>\n      {title ? <PhoneboockTitle>{title}</PhoneboockTitle> : ''}\n      {firstTitle ? <h2>{firstTitle}</h2> : ''}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  firstTitle: PropTypes.string,\n  children: PropTypes.node,\n};\n","import { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { Contact } from 'components/Contact/Contact';\nimport { Filter } from 'components/Filter/Filter';\nimport { GlobalStyle } from 'components/GlobalStyle';\nimport { Section } from 'components/Section/Section';\n\nconst Contacts = () => {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <AddContactForm />\n      </Section>\n      <Section firstTitle=\"Contacts\">\n        <Contact>\n          <Filter />\n        </Contact>\n      </Section>\n      <GlobalStyle />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Input","styled","Field","theme","colors","black","ContactForm","Form","ContactLabel","red","AddButton","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","schema","yup","shape","name","matches","min","max","required","number","initialValues","AddContactForm","dispatch","useDispatch","contactsName","useSelector","map","contact","validationSchema","onSubmit","values","resetForm","includes","alert","addContact","autoComplete","htmlFor","component","type","ContactsList","ContactItem","DeleteButton","selectFilter","filter","Contact","children","visibleContacts","toLowerCase","useEffect","fetchContacts","Loader","length","id","onClick","deleteContact","FilterForm","Filter","value","onChange","event","filterContacts","currentTarget","GlobalStyle","createGlobalStyle","PhoneboockTitle","Section","title","firstTitle"],"sourceRoot":""}